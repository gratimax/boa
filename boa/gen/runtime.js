// This file is concatenated to the beginning of every output.
// It defines the top-level runtime environment with modules.
// Maybe in the future it will be written entirely in python.
(function (root) {

  // the root boa object
  var boa = root.boa$ = {};

  // the boa prelude(provided to every module)
  var prelude = boa.prelude = {};

  // a 'registry' of sorts for modules
  // the paths are strings that look like this:
  // my.module => my/module/__init__.py
  // my.module.x => my/module/x.py
  // my => my/__init__.py
  // the values are modules that have been generated with boa.mod, module objects
  var modules = boa.modules = {};

  // the import function to be used with a module
  // takes a path for the module that will do the importing, as well as its imports$ object
  var imp = boa.imp = function (importer) {

    var path = importer.split('.');

    // takes the object to be imported into,
    // module to be imported, and names (if they are specified)
    // import my_module => import(module, 'my_module')
    // from my_module import a, b => import(module, 'my_module', ['a', 'b'])
    // from my_module import * => import(module, 'my_module', 'all')
    return function (object, importee, names) {

    };
  };

  // class for modules, takes code function
  var Module = boa.Module = function (path, code) {
    this.path = path;
    this.code = code;
    this.value = null;
    this.loaded = false;
  };

  // Load this module
  Module.prototype.load = function () {
    if(!this.loaded) {
      // load the module

      // module-level objects
      var module = {};
      // the function to do an import
      prelude.import = imp(this.path);

      // provide the module and prelude, run the module code
      this.code(module, prelude);

      // export is the module
      this.value = module;
    }
    return this.value;
  };

  // Define a module.
  // calls to this a generated by the code generator, they look like this:
  // boa$.mod('my.module.x', function (module$, prelude$)
  var mod = boa.mod = function (path, code) {

  };

  // set the main value
  var main = boa.main = function (path) {
    boa.__main__ = path;
  }

})(this);